using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.InputSystem;
using UnityEngine;

public class PlayerShooting : Shooting
{
    Ray shootRay = new Ray();
    public GameObject gunZone;
    public LineRenderer aimingLine;

    public Vector3 begin;
    public Vector3 end;
    public float aimRadius = 90f;
    public float gunZoneTimer;
    public float zoneSpeed;
    public bool aiming;
    public TrailRenderer trail;
    public int destroyLayer;

    public bool frozen = false;
    public AudioClip gunShot;
    public AudioClip shotGunSound;
    public AudioClip bossDeathSFX;
    public AudioClip standardDeath;
    public AudioClip noAmmoSound;
    public bool usedFanning = false;
    public GameObject fanningMaker;
    public GameObject mainCam;
    CameraShader camShader;
    public static bool gotShotgun = true;
    public static bool gotFan = true;
    public ParticleSystem fanningDeath;
    public GameObject shotgun;

    protected override void Start()
    {
        if (!gotFan)
        {
            fanningMaker.SetActive(false);
        }
        mainCam = GameObject.FindGameObjectWithTag("MainCamera");
        camShader = mainCam.GetComponent<CameraShader>();
        base.Start();
        aimingLine = gunZone.GetComponent<LineRenderer>();
        aimingLine.enabled = false;
        destroyLayer = LayerMask.GetMask("Destroy");
    }
    public void bossDeath()
    {
        soundSource.PlayOneShot(bossDeathSFX);
    }

    private void Update()
    {
        gunZoneTimer += Time.deltaTime;

        if (gameObject != null && !frozen)
        {
            // Handle right trigger and left mouse button for shooting
            if ((Gamepad.current != null && Gamepad.current.rightTrigger.wasPressedThisFrame) ||
                (Mouse.current != null && Mouse.current.leftButton.wasPressedThisFrame))
            {
                if (!firing && bullets > 0)
                {
                    soundSource.PlayOneShot(gunShot);
                    firing = true;
                    Shoot();
                    bullets -= 1;
                    Ammo(1);
                }
                else if (!firing && bullets == 0)
                {
                    soundSource.PlayOneShot(noAmmoSound);
                }
            }

            // Handle trigger/mouse button release
            if ((Gamepad.current != null && Gamepad.current.rightTrigger.wasReleasedThisFrame) ||
                (Mouse.current != null && Mouse.current.leftButton.wasReleasedThisFrame))
            {
                firing = false;
            }

            // Handle right shoulder and right mouse button for shotgun
            if ((Gamepad.current != null && Gamepad.current.rightShoulder.wasPressedThisFrame) ||
                (Mouse.current != null && Mouse.current.rightButton.wasPressedThisFrame))
            {
                if (bullets >= 3 && gotShotgun)
                {
                    soundSource.PlayOneShot(shotGunSound);
                    Shotgun("Enemy");
                    shotgun.SetActive(true);
                    bullets -= 3;
                    Ammo(3);
                    //mainCam.GetComponent<CameraShake>().TriggerShake();
                }
                else if (bullets < 3)
                {
                    soundSource.PlayOneShot(noAmmoSound);
                }
            }

            // Handle shotgun deactivation
            if ((Gamepad.current != null && Gamepad.current.rightShoulder.wasReleasedThisFrame) ||
                (Mouse.current != null && Mouse.current.rightButton.wasReleasedThisFrame) ||
                shotGunTimer > 1f)
            {
                shotgun.SetActive(false);
                shotGunTimer = 0;
            }

            if ((Gamepad.current != null && Gamepad.current.rightShoulder.isPressed) ||
                (Mouse.current != null && Mouse.current.rightButton.isPressed))
            {
                shotGunTimer += Time.deltaTime;
            }



            // Handle fan mode activation (Y button or F key)
            if ((Gamepad.current != null && Gamepad.current.yButton.wasPressedThisFrame) ||
                (Keyboard.current != null && Keyboard.current.fKey.wasPressedThisFrame))
            {
                if (!aiming && bullets > 0 && !usedFanning && aimingLine != null && gotFan)
                {
                    camShader.enabled = true;
                    gunZone.SetActive(true);
                    aimingLine.enabled = true;
                    trail.enabled = true;
                    gunZoneTimer = 0;
                    aiming = true;
                    begin = new Vector3(gunZone.transform.eulerAngles.x, gunZone.transform.eulerAngles.y, gunZone.transform.eulerAngles.z);
                    end = new Vector3(gunZone.transform.eulerAngles.x, gunZone.transform.eulerAngles.y + aimRadius, gunZone.transform.eulerAngles.z);
                    frozen = true;
                    usedFanning = true;
                    fanningMaker.SetActive(false);
                    //Debug.Log("NEW SCRIPT");
                }
            }

            // Handle fan mode shooting
            if ((Gamepad.current != null && Gamepad.current.rightTrigger.wasPressedThisFrame) ||
                (Mouse.current != null && Mouse.current.leftButton.wasPressedThisFrame))
            {
                if (aiming && bullets > 0 && aimingLine != null)
                {
                    ParticleSystem Flash = Instantiate(muzzleFlash, firePoint.position, firePoint.rotation);
                    shootRay.origin = gunZone.transform.position;
                    shootRay.direction = gunZone.transform.forward;
                    aimingLine.startColor = Color.yellow;
                    aimingLine.endColor = Color.yellow;
                    RaycastHit shootHit;
                    bullets -= 1;
                    soundSource.PlayOneShot(gunShot);
                    Ammo(1);

                    if (Physics.Raycast(shootRay, out shootHit, aimingLine.bounds.size.magnitude, destroyLayer))
                    {
                        Debug.Log("RAYCAST HIT");
                        ParticleSystem destruction = Instantiate(fanningDeath, shootHit.collider.gameObject.transform.position, Quaternion.identity);
                        Destroy(shootHit.collider.gameObject);
                    }
                }
                else if (bullets == 0)
                {
                    soundSource.PlayOneShot(noAmmoSound);
                }
            }

            // Handle aiming color change on trigger/mouse release
            if ((Gamepad.current != null && Gamepad.current.rightTrigger.wasReleasedThisFrame) ||
                (Mouse.current != null && Mouse.current.leftButton.wasReleasedThisFrame))
            {
                if (aiming && bullets > 0 && aimingLine != null)
                {
                    aimingLine.startColor = Color.red;
                    aimingLine.endColor = Color.red;
                }
            }

            // Handle fan aiming movement
            if (aiming && aimingLine != null)
            {
                Debug.Log("fanning started");
                gunZone.transform.eulerAngles = new Vector3(gunZone.transform.rotation.x,
                Mathf.Lerp(begin.y, end.y, gunZoneTimer * zoneSpeed),
                gunZone.transform.rotation.z);
            }

            // Reset after fan aiming completes
            if (gunZoneTimer > 1 / zoneSpeed && frozen && aimingLine != null)
            {
                aiming = false;
                aimingLine.enabled = false;
                trail.enabled = false;
                gunZone.transform.eulerAngles = new Vector3(gunZone.transform.eulerAngles.x, gameObject.transform.eulerAngles.y - (aimRadius / 2), gunZone.transform.eulerAngles.z);
                frozen = false;
                camShader.enabled = false;
            }
        }
    }
}
