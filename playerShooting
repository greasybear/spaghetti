using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.InputSystem;
using UnityEngine;

public class PlayerShooting : Shooting
{
    Ray shootRay = new Ray();
    public GameObject gunZone;
    public LineRenderer aimingLine;

    public Vector3 begin;
    public Vector3 end;
    public float aimRadius = 90f;
    public float gunZoneTimer;
    public float zoneSpeed;
    public bool aiming;
    public TrailRenderer trail;
    public int destroyLayer;
    public int secondDestroyLayer;

    public bool frozen = false;
    public AudioClip gunShot;
    public AudioClip shotGunSound;
    public AudioClip bossDeathSFX;
    public AudioClip standardDeath;
    public AudioClip noAmmoSound;
    public bool usedFanning = false;
    public GameObject fanningMaker;
    public GameObject mainCam;
    CameraShader camShader;
    public ParticleSystem fanningDeath;
    public GameObject shotgun;
    public ParticleSystem regularDestruction;

    public static bool gotShotgun = true;
    public static bool gotFan = true;
    public static int shotGunAmmo = 3;

    PlayerMovement playMovement;

    public float spinSpeed;
    public int gunRotations;
    bool shotGunTimerBool = false;

    public AudioClip ping;

    protected override void Start()
    {
        playMovement = GetComponent<PlayerMovement>();
        if (gotShotgun && !UpgradeManager.boughtShotgunAmmo)
        {
            shotGunAmmo = 3;
        }

        if (!gotFan)
        {
            fanningMaker.SetActive(false);
        }

        mainCam = GameObject.FindGameObjectWithTag("MainCamera");
        camShader = mainCam.GetComponent<CameraShader>();
        base.Start();
        aimingLine = gunZone.GetComponent<LineRenderer>();
        aimingLine.enabled = false;
        destroyLayer = LayerMask.GetMask("Destroy");
        secondDestroyLayer = LayerMask.GetMask("EnemyHellBullet");
    }

    public void bossDeath()
    {
        soundSource.PlayOneShot(bossDeathSFX);
    }

    public void DestroyAllObjectsWithTags(string[] tags)
    {
        int totalDestroyed = 0;

        foreach (string tag in tags)
        {
            GameObject[] objects = GameObject.FindGameObjectsWithTag(tag);
            foreach (GameObject obj in objects)
            {
                Destroy(obj);
                totalDestroyed++;
            }
        }

        Debug.Log($"Destroyed {totalDestroyed} objects with tags: {string.Join(", ", tags)}");
    }

    public void StartRotation(GameObject target, Vector3 axis, float speed, int rotations)
    {
        StartCoroutine(RotateObject(target, axis, speed, rotations));
    }

    private IEnumerator RotateObject(GameObject target, Vector3 axis, float speed, int rotations)
    {
        if (target == null || rotations <= 0) yield break;

        axis.Normalize(); // ensure axis is valid
        float totalRotation = 360f * rotations;
        float rotatedAmount = 0f;

        while (rotatedAmount < totalRotation)
        {
            float step = speed * Time.deltaTime;
            if (rotatedAmount + step > totalRotation)
                step = totalRotation - rotatedAmount;

            target.transform.Rotate(axis, step, Space.Self);
            rotatedAmount += step;
            yield return null;
        }

        // Snap cleanly so drift never accumulates
        target.transform.localRotation = Quaternion.AngleAxis(0, axis) * target.transform.localRotation;
    }



    private void Update()
    {
        // 游댠 GOD MODE: DELETE BEFORE RELEASE
        if ((Gamepad.current?.rightStickButton.wasPressedThisFrame ?? false) || (Keyboard.current?.spaceKey.wasPressedThisFrame ?? false))
        {
            DestroyAllObjectsWithTags(new string[] { "Enemy", "ShotgunBoss", "Boss" });
        }

        gunZoneTimer += Time.deltaTime;

        if (gameObject == null) return;

        // 游릴 Block input if paused
        if (playMovement.isPaused) return;

        if (!frozen)
        {
            // 游릴 Standard shoot input
            bool shootInput = (Gamepad.current?.rightTrigger.wasPressedThisFrame ?? false) ||
                              (Mouse.current?.leftButton.wasPressedThisFrame ?? false);

            if (shootInput)
            {
                if (!firing && bullets > 0 && BattlePrelude.preludePlayed)
                {
                    soundSource.PlayOneShot(gunShot);
                    firing = true;
                    Shoot();
                    bullets -= 1;
                    Ammo(1);
                }
                else if (!firing && bullets == 0)
                {
                    soundSource.PlayOneShot(noAmmoSound);
                }
            }

            // 游댃 Fire button release
            if ((Gamepad.current?.rightTrigger.wasReleasedThisFrame ?? false) ||
                (Mouse.current?.leftButton.wasReleasedThisFrame ?? false))
            {
                firing = false;
            }

            // 游릴 Shotgun input
            bool shotgunInput = (Gamepad.current?.rightShoulder.wasPressedThisFrame ?? false) ||
                                (Mouse.current?.rightButton.wasPressedThisFrame ?? false);

            if (shotgunInput && bullets >= shotGunAmmo && gotShotgun && BattlePrelude.preludePlayed)
            {
                shotGunTimerBool = true;
                soundSource.PlayOneShot(shotGunSound);
                Shotgun("Enemy", "Boss", "ShotgunBoss");
                shotgun.SetActive(true);
                bullets -= shotGunAmmo;
                Ammo(shotGunAmmo);
                mainCam.GetComponent<CameraShake>().TriggerShake();
                StartRotation(shotgun, Vector3.back,spinSpeed, gunRotations);
            }
            else if (shotgunInput && bullets < shotGunAmmo)
            {
                soundSource.PlayOneShot(noAmmoSound);
            }

            if (shotGunTimerBool) { shotGunTimer += Time.deltaTime; }
            // 游댃 Shotgun release or timer timeout
            if (shotGunTimer > 1f)
            {
                shotGunTimerBool = false;
                shotgun.SetActive(false);
                shotGunTimer = 0;
            }

            //if ((Gamepad.current?.rightShoulder.isPressed ?? false) ||
            //    (Mouse.current?.rightButton.isPressed ?? false))
            //{
            //    shotGunTimer += Time.deltaTime;
            //}
            
        }

        // 游릴 Fan mode input
        bool fanInput = (Gamepad.current?.yButton.wasPressedThisFrame ?? false) ||
                        (Keyboard.current?.fKey.wasPressedThisFrame ?? false);

        if (fanInput && !aiming && bullets > 0 && !usedFanning && aimingLine != null && gotFan)
        {
            camShader.enabled = true;
            gunZone.SetActive(true);
            aimingLine.enabled = true;
            trail.enabled = true;
            gunZoneTimer = 0;
            aiming = true;
            begin = gunZone.transform.eulerAngles;
            end = new Vector3(begin.x, begin.y + aimRadius, begin.z);
            frozen = true;
            usedFanning = true;
            fanningMaker.SetActive(false);
        }

        // 游릴 Fan mode shooting
        bool fanShootInput = (Gamepad.current?.rightTrigger.wasPressedThisFrame ?? false) ||
                             (Mouse.current?.leftButton.wasPressedThisFrame ?? false);

        if (fanShootInput && aiming && bullets > 0 && aimingLine != null)
        {
            ParticleSystem flash = Instantiate(muzzleFlash, firePoint.position, firePoint.rotation);
            shootRay.origin = gunZone.transform.position;
            shootRay.direction = gunZone.transform.forward;
            aimingLine.startColor = Color.yellow;
            aimingLine.endColor = Color.yellow;
            RaycastHit shootHit;
            bullets -= 1;
            soundSource.PlayOneShot(gunShot);
            Ammo(1);

            if (Physics.Raycast(shootRay, out shootHit, aimingLine.bounds.size.magnitude, destroyLayer))
            {
                Debug.Log("RAYCAST HIT");

                if (shootHit.collider.CompareTag("Enemy"))
                {
                    Instantiate(fanningDeath, shootHit.collider.transform.position, Quaternion.identity);
                    mainCam.GetComponent<CameraShake>().TriggerShake();
                    soundSource.PlayOneShot(ping, .7f);

                }
                if (shootHit.collider.CompareTag("Destroyable"))
                {
                    Instantiate(regularDestruction, shootHit.collider.transform.position, Quaternion.identity);
                }

                Destroy(shootHit.collider.gameObject);
            }
        }
        else if (fanShootInput && bullets == 0)
        {
            soundSource.PlayOneShot(noAmmoSound);
        }

        // 游댃 Fan release color reset
        if ((Gamepad.current?.rightTrigger.wasReleasedThisFrame ?? false) ||
            (Mouse.current?.leftButton.wasReleasedThisFrame ?? false))
        {
            if (aiming && bullets > 0 && aimingLine != null)
            {
                aimingLine.startColor = Color.red;
                aimingLine.endColor = Color.red;
            }
        }

        // 游대 Fan mode rotation update
        if (aiming && aimingLine != null)
        {
            gunZone.transform.eulerAngles = new Vector3(
                gunZone.transform.rotation.x,
                Mathf.Lerp(begin.y, end.y, gunZoneTimer * zoneSpeed),
                gunZone.transform.rotation.z);
        }

        // 游띔 Fan mode cleanup
        if (gunZoneTimer > 1 / zoneSpeed && frozen && aimingLine != null)
        {
            aiming = false;
            aimingLine.enabled = false;
            trail.enabled = false;
            gunZone.transform.eulerAngles = new Vector3(
                gunZone.transform.eulerAngles.x,
                transform.eulerAngles.y - (aimRadius / 2),
                gunZone.transform.eulerAngles.z);
            frozen = false;
            camShader.enabled = false;
        }
    }


}
